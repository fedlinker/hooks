(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{njgf:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return c})),n.d(t,"default",(function(){return u}));var a=n("Fcif"),l=n("+I+c"),o=(n("mXGw"),n("/FXl")),b=n("TjRS"),i=n("JvSA"),c=(n("aD51"),{});void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"docs/useToggle.mdx"}});var r={_frontmatter:c},g=b.a;function u(e){var t=e.components,n=Object(l.a)(e,["components"]);return Object(o.b)(g,Object(a.a)({},r,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h1",{id:"usetoggle"},"useToggle"),Object(o.b)("p",null,"Use boolean value. The value can be changed by the returned toggle functions."),Object(o.b)("h2",{id:"usage"},"Usage"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"function useToggle(\n  initialValue?: boolean\n): [\n  value: boolean,\n  actions: {\n    toggle: (newValue?: boolean) => void;\n    toggleOn: () => void;\n    toggleOff: () => void;\n  }\n];\n")),Object(o.b)("p",null,"Params:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"strong"},"initialValue"),":")," optional initial value, default is false.")),Object(o.b)("p",null,"Return:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"strong"},"value"),":")," boolean value, can be changed by the following functions."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"strong"},"toggle"),":")," set the value according to the newValue param. If the newValue is undefined, toggle the value."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"strong"},"toggleOn"),":")," set the value to true."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"strong"},"toggleOff"),":")," set the value to false.")),Object(o.b)("h2",{id:"example"},"Example"),Object(o.b)(i.a,{mdxType:"Example"}),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'import React from "react";\nimport { useToggle } from "@fedlinker/hooks";\n\nfunction Example() {\n  const [visible, { toggle, toggleOn, toggleOff }] = useToggle(true);\n\n  return (\n    <>\n      <button onClick={() => toggle()}>Toggle</button>\n      <button onClick={toggleOn}>Toggle on</button>\n      <button onClick={toggleOff}>Toggle off</button>\n      <p style={{ display: visible ? "block" : "none" }}>\n        Example text can be toggled to display or not by the buttons above.\n      </p>\n    </>\n  );\n}\n\nexport default Example;\n')))}void 0!==u&&u&&u===Object(u)&&Object.isExtensible(u)&&!u.hasOwnProperty("__filemeta")&&Object.defineProperty(u,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"docs/useToggle.mdx"}}),u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---docs-use-toggle-mdx-b7419294c39da8e5a86f.js.map