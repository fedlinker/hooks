{"version":3,"sources":["webpack:///../docs/useTimeout.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"sQASaA,G,UAAe,S,qMAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,cADR,cAGA,mDACA,iBAAQ,CACN,GAAM,SADR,SAGA,uBAAK,gCAAMC,WAAW,OAAU,CAC5B,UAAa,gBADZ,qKAQL,gCACA,sBACE,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAK,0BAAYA,WAAW,UAAvB,MAAxB,KAApB,sCACA,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAK,0BAAYA,WAAW,UAAvB,MAAxB,KAApB,wDAAsK,0BAAYA,WAAW,MAAvB,MAAtK,gFAAsS,0BAAYA,WAAW,MAAvB,oBAAtS,mBACA,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAK,0BAAYA,WAAW,UAAvB,sBAAxB,KAApB,oCAAkK,0BAAYA,WAAW,MAAvB,SAAlK,cACA,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAK,0BAAYA,WAAW,UAAvB,oBAAxB,KAApB,+CAEF,gCACA,sBACE,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAK,0BAAYA,WAAW,UAAvB,SAAxB,KAApB,mCACA,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAK,0BAAYA,WAAW,UAAvB,UAAxB,KAApB,uCAEF,iBAAQ,CACN,GAAM,WADR,WAGA,YAAC,IAAD,CAASD,QAAQ,YACjB,uBAAK,gCAAMC,WAAW,OAAU,CAC5B,UAAa,iBADZ,krC,mMAyDTJ,EAAWK,gBAAiB","file":"component---docs-use-timeout-mdx-231a23a43ae6ecc07d9b.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/liweisheng/Projects/fedlinker/hooks/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport Example from \"./examples/Timeout\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"usetimeout\"\n    }}>{`useTimeout`}</h1>\n    <p>{`Handle with timeout timer.`}</p>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`function useTimeout(\n  fn: () => void,\n  ms?: number,\n  options?: { imperative?: boolean; disabled?: boolean }\n): [start: () => void, cancel: () => void];\n`}</code></pre>\n    <p>{`Params:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\"><inlineCode parentName=\"strong\">{`fn`}</inlineCode>{`:`}</strong>{` function expected to be executed.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\"><inlineCode parentName=\"strong\">{`ms`}</inlineCode>{`:`}</strong>{` delay time, in milliseconds, default is 0. When the `}<inlineCode parentName=\"li\">{`ms`}</inlineCode>{` changes, it will clear previous timer automatically, and set a new timer if `}<inlineCode parentName=\"li\">{`options.disabled`}</inlineCode>{` is not truthy.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\"><inlineCode parentName=\"strong\">{`options.imperative`}</inlineCode>{`:`}</strong>{` set timer manually by using the `}<inlineCode parentName=\"li\">{`start`}</inlineCode>{` function.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\"><inlineCode parentName=\"strong\">{`options.disabled`}</inlineCode>{`:`}</strong>{` disable timer, will clear previous timer.`}</li>\n    </ul>\n    <p>{`Return:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\"><inlineCode parentName=\"strong\">{`start`}</inlineCode>{`:`}</strong>{` the funciton of setting timer.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\"><inlineCode parentName=\"strong\">{`cancel`}</inlineCode>{`:`}</strong>{` the funciton of cancelling timer.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <Example mdxType=\"Example\" />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React, { useState } from \"react\";\nimport { useTimeout } from \"@fedlinker/hooks\";\n\nfunction Example() {\n  const [imperative, setImperative] = useState(false);\n  const [disabled, setDisabled] = useState(false);\n  const [ms, setMs] = useState(1000);\n\n  const [count, setCount] = useState(0);\n  const [start, cancel] = useTimeout(\n    () => {\n      setCount((count) => ++count);\n    },\n    ms,\n    { imperative, disabled }\n  );\n\n  return (\n    <>\n      <button onClick={start}>Start</button>\n      <button onClick={cancel}>Cancel</button>\n      <button\n        onClick={() => {\n          setMs(Math.round(Math.random() * 10000));\n        }}\n      >\n        Random delay time\n      </button>\n      <input\n        type=\"checkbox\"\n        checked={imperative}\n        onChange={(event) => {\n          setImperative(event.target.checked);\n        }}\n      /> Imperative\n      <input\n        type=\"checkbox\"\n        checked={disabled}\n        onChange={(event) => {\n          setDisabled(event.target.checked);\n        }}\n      />{\" \"}\n      Disabled\n      <br />\n      Delay time: {ms}. Count: {count}\n    </>\n  );\n}\n\nexport default Example;\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}