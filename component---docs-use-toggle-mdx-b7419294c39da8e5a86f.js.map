{"version":3,"sources":["webpack:///../docs/useToggle.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"oQASaA,G,UAAe,S,oMAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,aADR,aAGA,sGACA,iBAAQ,CACN,GAAM,SADR,SAGA,uBAAK,gCAAMC,WAAW,OAAU,CAC5B,UAAa,gBADZ,sMAaL,gCACA,sBACE,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAK,0BAAYA,WAAW,UAAvB,gBAAxB,KAApB,+CAEF,gCACA,sBACE,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAK,0BAAYA,WAAW,UAAvB,SAAxB,KAApB,8DACA,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAK,0BAAYA,WAAW,UAAvB,UAAxB,KAApB,mGACA,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAK,0BAAYA,WAAW,UAAvB,YAAxB,KAApB,2BACA,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAK,0BAAYA,WAAW,UAAvB,aAAxB,KAApB,6BAEF,iBAAQ,CACN,GAAM,WADR,WAGA,YAAC,IAAD,CAASD,QAAQ,YACjB,uBAAK,gCAAMC,WAAW,OAAU,CAC5B,UAAa,iBADZ,gjB,kMA0BTJ,EAAWK,gBAAiB","file":"component---docs-use-toggle-mdx-b7419294c39da8e5a86f.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/liweisheng/Projects/fedlinker/hooks/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport Example from \"./examples/Toggle\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"usetoggle\"\n    }}>{`useToggle`}</h1>\n    <p>{`Use boolean value. The value can be changed by the returned toggle functions.`}</p>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`function useToggle(\n  initialValue?: boolean\n): [\n  value: boolean,\n  actions: {\n    toggle: (newValue?: boolean) => void;\n    toggleOn: () => void;\n    toggleOff: () => void;\n  }\n];\n`}</code></pre>\n    <p>{`Params:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\"><inlineCode parentName=\"strong\">{`initialValue`}</inlineCode>{`:`}</strong>{` optional initial value, default is false.`}</li>\n    </ul>\n    <p>{`Return:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\"><inlineCode parentName=\"strong\">{`value`}</inlineCode>{`:`}</strong>{` boolean value, can be changed by the following functions.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\"><inlineCode parentName=\"strong\">{`toggle`}</inlineCode>{`:`}</strong>{` set the value according to the newValue param. If the newValue is undefined, toggle the value.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\"><inlineCode parentName=\"strong\">{`toggleOn`}</inlineCode>{`:`}</strong>{` set the value to true.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\"><inlineCode parentName=\"strong\">{`toggleOff`}</inlineCode>{`:`}</strong>{` set the value to false.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <Example mdxType=\"Example\" />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React from \"react\";\nimport { useToggle } from \"@fedlinker/hooks\";\n\nfunction Example() {\n  const [visible, { toggle, toggleOn, toggleOff }] = useToggle(true);\n\n  return (\n    <>\n      <button onClick={() => toggle()}>Toggle</button>\n      <button onClick={toggleOn}>Toggle on</button>\n      <button onClick={toggleOff}>Toggle off</button>\n      <p style={{ display: visible ? \"block\" : \"none\" }}>\n        Example text can be toggled to display or not by the buttons above.\n      </p>\n    </>\n  );\n}\n\nexport default Example;\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}