{"version":3,"sources":["webpack:///../docs/useRerender.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"oQASaA,G,UAAe,S,sMAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,eADR,eAGA,6IACA,iBAAQ,CACN,GAAM,SADR,SAGA,uBAAK,gCAAMC,WAAW,OAAU,CAC5B,UAAa,gBADZ,0CAIL,iBAAQ,CACN,GAAM,WADR,WAGA,YAAC,IAAD,CAASD,QAAQ,YACjB,uBAAK,gCAAMC,WAAW,OAAU,CAC5B,UAAa,iBADZ,mW,oMA4BTJ,EAAWK,gBAAiB","file":"component---docs-use-rerender-mdx-531bd4739dc20c84c463.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/liweisheng/Projects/fedlinker/hooks/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport Example from \"./examples/Rerender\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"usererender\"\n    }}>{`useRerender`}</h1>\n    <p>{`This hook return a function that you can use to rerender the component. It is usually used to rerender mutable data.`}</p>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`function useRerender(): () => void;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <Example mdxType=\"Example\" />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React from \"react\";\nimport { useRerender } from \"@fedlinker/hooks\";\n\nlet count = 0;\n\nfunction Example() {\n  const rerender = useRerender();\n\n  function handleClick() {\n    count++;\n    rerender();\n  }\n\n  return (\n    <>\n      <button onClick={handleClick}>+1</button> {count}\n    </>\n  );\n}\n\nexport default Example;\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}