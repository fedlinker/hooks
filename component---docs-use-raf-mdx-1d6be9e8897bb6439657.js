(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{iZYQ:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return b})),n.d(t,"default",(function(){return m}));var a=n("Fcif"),i=n("+I+c"),o=(n("mXGw"),n("/FXl")),r=n("TjRS"),c=n("u9TD"),b=(n("aD51"),{});void 0!==b&&b&&b===Object(b)&&Object.isExtensible(b)&&!b.hasOwnProperty("__filemeta")&&Object.defineProperty(b,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"docs/useRaf.mdx"}});var l={_frontmatter:b},s=r.a;function m(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(o.b)(s,Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h1",{id:"useraf"},"useRaf"),Object(o.b)("p",null,"Use this hook to handle with JavaScript animation with ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame"}),"requestAnimationFrame"),"."),Object(o.b)("h2",{id:"usage"},"Usage"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"function useRaf(\n  fn: (percentage: number) => void,\n  duration?: number,\n  options?: { imperative?: boolean; disabled?: boolean }\n): [start: () => void, cancel: () => void];\n")),Object(o.b)("p",null,"Params:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"strong"},"fn"),":")," function expected to be executed. The ",Object(o.b)("inlineCode",{parentName:"li"},"percentage")," parameter indicates the percentage of time spent."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"strong"},"duration"),":")," time of animation, in milliseconds, default is 0. When the ",Object(o.b)("inlineCode",{parentName:"li"},"duration")," changes, it will cancel previous animation automatically, and start a new animation if ",Object(o.b)("inlineCode",{parentName:"li"},"options.disabled")," is not truthy."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"strong"},"options.imperative"),":")," start animation manually by using the ",Object(o.b)("inlineCode",{parentName:"li"},"start")," function."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"strong"},"options.disabled"),":")," disable animation, will cancel previous animation.")),Object(o.b)("p",null,"Return:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"strong"},"start"),":")," start animation."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"strong"},"cancel"),":")," cancel animation.")),Object(o.b)("h2",{id:"example"},"Example"),Object(o.b)(c.a,{mdxType:"Example"}),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'import React, { useState } from "react";\nimport { useRaf } from "@fedlinker/hooks";\n\nfunction Example() {\n  const [imperative, setImperative] = useState(true);\n  const [disabled, setDisabled] = useState(false);\n  const [duration, setDuration] = useState(1000);\n\n  const [percentage, setPercentage] = useState(0);\n  const [start, cancel] = useRaf(setPercentage, duration, {\n    imperative,\n    disabled,\n  });\n\n  return (\n    <>\n      <button onClick={start}>Start</button>\n      <button onClick={cancel}>Cancel</button>\n      <button\n        onClick={() => {\n          setDuration(Math.round(Math.random() * 10000));\n        }}\n      >\n        Random duration time\n      </button>\n      <input\n        type="checkbox"\n        checked={imperative}\n        onChange={(event) => {\n          setImperative(event.target.checked);\n        }}\n      /> Imperative\n      <input\n        type="checkbox"\n        checked={disabled}\n        onChange={(event) => {\n          setDisabled(event.target.checked);\n        }}\n      />{" "}\n      Disabled\n      <br />\n      Duration time: {duration}. Progress:{" "}\n      <progress max="100" value={percentage * 100}>\n        {percentage * 100}\n      </progress>\n    </>\n  );\n}\n\nexport default Example;\n')))}void 0!==m&&m&&m===Object(m)&&Object.isExtensible(m)&&!m.hasOwnProperty("__filemeta")&&Object.defineProperty(m,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"docs/useRaf.mdx"}}),m.isMDXComponent=!0}}]);
//# sourceMappingURL=component---docs-use-raf-mdx-1d6be9e8897bb6439657.js.map